<Activity mc:Ignorable="sap sap2010 sads" x:Class="GenerateReport" mva:VisualBasic.Settings="{x:Null}" sap2010:WorkflowViewState.IdRef="GenerateReport_1"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:moiw="clr-namespace:Microsoft.Office.Interop.Word;assembly=Microsoft.Office.Interop.Word"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:p="http://schemas.uipath.com/workflow/activities/word"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:sri="clr-namespace:System.Runtime.InteropServices;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>Microsoft.Office.Interop.Word</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>Microsoft.Office.Interop.Word</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GenerateReport" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="ReportName" />
      <Variable x:TypeArguments="x:String" Name="ReportFolder" />
      <Variable x:TypeArguments="moiw:Application" Name="wordApp" />
      <Variable x:TypeArguments="x:Object" Name="missing" />
      <Variable x:TypeArguments="moiw:Document" Name="wordDoc" />
    </Sequence.Variables>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[ReportFolder]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">["C:\Users\" +Environment.UserName+ "\Documents\PM SKK\"]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[ReportName]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[datetime.Now.ToString("MMyyyy") + ".docx"]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CopyFile ContinueOnError="{x:Null}" Destination="[ReportFolder+ReportName]" DisplayName="Copy File" sap2010:WorkflowViewState.IdRef="CopyFile_1" Overwrite="True" Path="BaseTemplate.docx" />
    <p:WordApplicationScope DisplayName="Word Application Scope" FilePath="[ReportFolder+ReportName]" sap2010:WorkflowViewState.IdRef="WordApplicationScope_1">
      <p:WordApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WordDocument">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WordDocument" Name="WordDocumentScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_1">
            <p:WordReplacePicture DisplayName="Replace Picture" sap2010:WorkflowViewState.IdRef="WordReplacePicture_1" PictureAltText="Overview1" PicturePath="[ReportFolder + &quot;DC\overview1.jpg&quot;]" />
            <p:WordReplacePicture DisplayName="Replace Picture" sap2010:WorkflowViewState.IdRef="WordReplacePicture_2" PictureAltText="Performance_1" PicturePath="[ReportFolder + &quot;DC\performance_1.jpg&quot;]" />
            <p:WordReplacePicture DisplayName="Replace Picture" sap2010:WorkflowViewState.IdRef="WordReplacePicture_3" PictureAltText="Overview_drc1" PicturePath="[ReportFolder + &quot;DRC\overview_drc1.jpg&quot;]" />
            <p:WordReplacePicture DisplayName="Replace Picture" sap2010:WorkflowViewState.IdRef="WordReplacePicture_4" PictureAltText="Performance_drc1" PicturePath="[ReportFolder + &quot;DRC\performance_drc1.jpg&quot;]" />
          </Sequence>
        </ActivityAction>
      </p:WordApplicationScope.Body>
    </p:WordApplicationScope>
    <Assign>
      <Assign.To>
        <OutArgument x:TypeArguments="moiw:Application">[wordApp]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="moiw:Application">[New Microsoft.Office.Interop.Word.ApplicationClass]</InArgument>
      </Assign.Value>
      <sap2010:WorkflowViewState.IdRef>Assign_115</sap2010:WorkflowViewState.IdRef>
    </Assign>
    <Assign>
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[wordApp.Visible]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
      </Assign.Value>
      <sap2010:WorkflowViewState.IdRef>Assign_116</sap2010:WorkflowViewState.IdRef>
    </Assign>
    <Assign>
      <Assign.To>
        <OutArgument x:TypeArguments="x:Object">[missing]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Object">[System.Reflection.Missing.Value]</InArgument>
      </Assign.Value>
      <sap2010:WorkflowViewState.IdRef>Assign_117</sap2010:WorkflowViewState.IdRef>
    </Assign>
    <Assign>
      <Assign.To>
        <OutArgument x:TypeArguments="moiw:Document">[wordDoc]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="moiw:Document">[wordApp.Documents.Open(ReportFolder+ReportName)]</InArgument>
      </Assign.Value>
      <sap2010:WorkflowViewState.IdRef>Assign_118</sap2010:WorkflowViewState.IdRef>
    </Assign>
    <ui:ExcelApplicationScope Password="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="Excel Application Scope DC" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" ReadOnly="True" Visible="False" WorkbookPath="[ReportFolder + &quot;DC\DC_022019163805.xls&quot;]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do DC" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="SheetName" />
              <Variable x:TypeArguments="x:Object" Name="missing" />
              <Variable x:TypeArguments="x:Int32" Default="16" Name="counter" />
            </Sequence.Variables>
            <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[SheetName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Hardware Overview</InArgument>
              </Assign.Value>
            </Assign>
            <While DisplayName="While Hardware Overview" sap2010:WorkflowViewState.IdRef="While_1">
              <While.Variables>
                <Variable x:TypeArguments="x:String" Name="Model" />
                <Variable x:TypeArguments="x:String" Name="HostName" />
                <Variable x:TypeArguments="x:String" Name="SerialNumber" />
                <Variable x:TypeArguments="x:String" Name="OSVersion" />
                <Variable x:TypeArguments="x:String" Name="TotalCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalUsableCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalUsedCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalAvailableCapacity" />
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
              </While.Variables>
              <While.Condition>[i &lt; 4]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_15">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString()]" DisplayName="Read Model" sap2010:WorkflowViewState.IdRef="ExcelReadCell_1" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[Model]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString()]" DisplayName="Read Hostname" sap2010:WorkflowViewState.IdRef="ExcelReadCell_2" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[HostName]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString()]" DisplayName="Read Serial Number" sap2010:WorkflowViewState.IdRef="ExcelReadCell_3" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[SerialNumber]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString()]" DisplayName="Read OS Version" sap2010:WorkflowViewState.IdRef="ExcelReadCell_4" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[OSVersion]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString()]" DisplayName="Read Total Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_5" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;I&quot; + counter.ToString()]" DisplayName="Read Total Usable Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_7" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalUsableCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;J&quot; + counter.ToString()]" DisplayName="Read Total Used Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_8" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalUsedCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;K&quot; + counter.ToString()]" DisplayName="Read Total Available Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_9" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalAvailableCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <Assign DisplayName="Assign Model" sap2010:WorkflowViewState.IdRef="Assign_6">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,1).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Model]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign HostName" sap2010:WorkflowViewState.IdRef="Assign_7">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,2).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[HostName]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Serial Number" sap2010:WorkflowViewState.IdRef="Assign_8">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,3).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[SerialNumber]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign OSVersion" sap2010:WorkflowViewState.IdRef="Assign_9">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,4).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[OSVersion]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Capacity" sap2010:WorkflowViewState.IdRef="Assign_10">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,5).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Usable Capacity" sap2010:WorkflowViewState.IdRef="Assign_11">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,6).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalUsableCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Used Capacity" sap2010:WorkflowViewState.IdRef="Assign_12">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,7).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalUsedCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Available Capacity" sap2010:WorkflowViewState.IdRef="Assign_13">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(5).Cell(i+2,8).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalAvailableCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </While>
            <Assign DisplayName="Assign Capacity Sheet" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[SheetName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Capacity</InArgument>
              </Assign.Value>
            </Assign>
            <While DisplayName="While In Aggregate Info" sap2010:WorkflowViewState.IdRef="While_2">
              <While.Variables>
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="4" Name="TableNumber" />
              </While.Variables>
              <While.Condition>[i&lt;4]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_18">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_19">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[TableNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[TableNumber+2]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelLookUpRange DisplayName="LookUp Range JKT-STOCL-0" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_1" Result="[StartRow]" SheetName="[SheetName]" Value="[&quot;JKT-STOCL-0&quot; + i.ToString]">
                  <ui:ExcelLookUpRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelLookUpRange.Range>
                </ui:ExcelLookUpRange>
                <ui:ExcelLookUpRange DisplayName="LookUp Range Aggregate Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_2" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Aggregate Info" />
                <Assign sap2010:WorkflowViewState.IdRef="Assign_17">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                  </Assign.Value>
                </Assign>
                <DoWhile DisplayName="Do While Capacity Aggregate Info" sap2010:WorkflowViewState.IdRef="DoWhile_1">
                  <DoWhile.Variables>
                    <Variable x:TypeArguments="x:String" Name="AggregateName" />
                    <Variable x:TypeArguments="x:String" Name="Allocated" />
                    <Variable x:TypeArguments="x:String" Name="Used" />
                    <Variable x:TypeArguments="x:String" Name="AvailTB" />
                    <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                    <Variable x:TypeArguments="x:String" Name="SnapReserve" />
                    <Variable x:TypeArguments="x:String" Name="AllInVolume" />
                    <Variable x:TypeArguments="x:String" Name="AggregateType" />
                    <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                  </DoWhile.Variables>
                  <DoWhile.Condition>[AggregateName &lt;&gt; ""]</DoWhile.Condition>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_29">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_20">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read Aggr Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_10" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateName]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_21">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,1).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AggregateName]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Allocated" sap2010:WorkflowViewState.IdRef="ExcelReadCell_11" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[Allocated]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_22">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,2).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Allocated]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Used" sap2010:WorkflowViewState.IdRef="ExcelReadCell_12" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[Used]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_23">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,3).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Used]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read AvailTB" sap2010:WorkflowViewState.IdRef="ExcelReadCell_13" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AvailTB]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_24">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,4).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AvailTB]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;F&quot; + counter.ToString]" DisplayName="Read Avail Persen" sap2010:WorkflowViewState.IdRef="ExcelReadCell_14" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AvailPersen]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_25">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,5).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AvailPersen]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Snap Reserve" sap2010:WorkflowViewState.IdRef="ExcelReadCell_15" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[SnapReserve]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_26">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,6).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[SnapReserve]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read All In Volume" sap2010:WorkflowViewState.IdRef="ExcelReadCell_16" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AllInVolume]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_27">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,7).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AllInVolume]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;I&quot; + counter.ToString]" DisplayName="Read Aggregate Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_17" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_28">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,8).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AggregateType]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + (counter+1).ToString]" DisplayName="Read Aggr Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_18" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateName]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                  </Sequence>
                </DoWhile>
              </Sequence>
            </While>
            <While DisplayName="While In Capacity Disk Summary" sap2010:WorkflowViewState.IdRef="While_3">
              <While.Variables>
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="5" Name="TableNumber" />
              </While.Variables>
              <While.Condition>[i&lt;4]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_30">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_31">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[TableNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[TableNumber+2]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelLookUpRange DisplayName="LookUp Range JKT-STOCL-0" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_3" Result="[StartRow]" SheetName="[SheetName]" Value="[&quot;JKT-STOCL-0&quot; + i.ToString]">
                  <ui:ExcelLookUpRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelLookUpRange.Range>
                </ui:ExcelLookUpRange>
                <ui:ExcelLookUpRange DisplayName="LookUp Range Disk Summary" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_4" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Disk Summary" />
                <Assign sap2010:WorkflowViewState.IdRef="Assign_32">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                  </Assign.Value>
                </Assign>
                <DoWhile DisplayName="Do While Disk Summary" sap2010:WorkflowViewState.IdRef="DoWhile_2">
                  <DoWhile.Variables>
                    <Variable x:TypeArguments="x:String" Name="DiskModel" />
                    <Variable x:TypeArguments="x:String" Name="DiskType" />
                    <Variable x:TypeArguments="x:String" Name="DiskSize" />
                    <Variable x:TypeArguments="x:String" Name="OwnedDisk" />
                    <Variable x:TypeArguments="x:String" Name="DataDrives" />
                    <Variable x:TypeArguments="x:String" Name="ParityDrives" />
                    <Variable x:TypeArguments="x:String" Name="SpareDisks" />
                    <Variable x:TypeArguments="x:String" Name="ADPDisks" />
                    <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                  </DoWhile.Variables>
                  <DoWhile.Condition>[DiskType &lt;&gt; ""]</DoWhile.Condition>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_33">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_34">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read Disk Model" sap2010:WorkflowViewState.IdRef="ExcelReadCell_19" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskModel]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_35">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,1).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskModel]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Disk Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_20" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_36">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,2).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskType]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Disk Size" sap2010:WorkflowViewState.IdRef="ExcelReadCell_21" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskSize]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_37">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,3).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskSize]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read OwnedDisk" sap2010:WorkflowViewState.IdRef="ExcelReadCell_22" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[OwnedDisk]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_38">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,4).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[OwnedDisk]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;F&quot; + counter.ToString]" DisplayName="Read Data Drives" sap2010:WorkflowViewState.IdRef="ExcelReadCell_23" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DataDrives]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_39">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,5).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DataDrives]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Parity Drives" sap2010:WorkflowViewState.IdRef="ExcelReadCell_24" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[ParityDrives]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_40">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,6).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[ParityDrives]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read Spare Disks" sap2010:WorkflowViewState.IdRef="ExcelReadCell_25" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[SpareDisks]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_41">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,7).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[SpareDisks]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next Disk Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_26" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                  </Sequence>
                </DoWhile>
              </Sequence>
            </While>
            <Sequence DisplayName="Sequence Volume Info" sap2010:WorkflowViewState.IdRef="Sequence_10">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="14" Name="TableNumber" />
              </Sequence.Variables>
              <ui:ExcelLookUpRange DisplayName="LookUp Range Volume Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_5" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Volume Info" />
              <Assign sap2010:WorkflowViewState.IdRef="Assign_42">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                </Assign.Value>
              </Assign>
              <DoWhile DisplayName="Do While Volume Info" sap2010:WorkflowViewState.IdRef="DoWhile_3">
                <DoWhile.Variables>
                  <Variable x:TypeArguments="x:String" Name="SVMName" />
                  <Variable x:TypeArguments="x:String" Name="VolumeName" />
                  <Variable x:TypeArguments="x:String" Name="Allocated" />
                  <Variable x:TypeArguments="x:String" Name="UsedData" />
                  <Variable x:TypeArguments="x:String" Name="Avail" />
                  <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                  <Variable x:TypeArguments="x:String" Name="ContainingAggregate" />
                  <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                </DoWhile.Variables>
                <DoWhile.Condition>[VolumeName &lt;&gt; ""]</DoWhile.Condition>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_43">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_44">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read SVM Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_27" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[SVMName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_45">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,1).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[SVMName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Volume Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_28" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[VolumeName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_46">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,2).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[VolumeName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Allocated" sap2010:WorkflowViewState.IdRef="ExcelReadCell_29" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[Allocated]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_47">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,3).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Allocated]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read Used Data" sap2010:WorkflowViewState.IdRef="ExcelReadCell_30" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[UsedData]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_48">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,4).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[UsedData]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Avail" sap2010:WorkflowViewState.IdRef="ExcelReadCell_31" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[Avail]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_49">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,5).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Avail]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read Avail Persen" sap2010:WorkflowViewState.IdRef="ExcelReadCell_32" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[AvailPersen]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_50">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,6).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[AvailPersen]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;L&quot; + counter.ToString]" DisplayName="Read Cont Aggregate" sap2010:WorkflowViewState.IdRef="ExcelReadCell_33" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[ContainingAggregate]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_51">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,7).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[ContainingAggregate]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next Volume Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_34" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[VolumeName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                </Sequence>
              </DoWhile>
            </Sequence>
            <Sequence DisplayName="Sequence Lun Info" sap2010:WorkflowViewState.IdRef="Sequence_12">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="15" Name="TableNumber" />
              </Sequence.Variables>
              <ui:ExcelLookUpRange DisplayName="LookUp Range Lun Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_6" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="LUN Info" />
              <Assign sap2010:WorkflowViewState.IdRef="Assign_52">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                </Assign.Value>
              </Assign>
              <DoWhile DisplayName="Do While Lun Info" sap2010:WorkflowViewState.IdRef="DoWhile_4">
                <DoWhile.Variables>
                  <Variable x:TypeArguments="x:String" Name="SVMName" />
                  <Variable x:TypeArguments="x:String" Name="LUNName" />
                  <Variable x:TypeArguments="x:String" Name="LUNPath" />
                  <Variable x:TypeArguments="x:String" Name="LUNSize" />
                  <Variable x:TypeArguments="x:String" Name="Avail" />
                  <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                  <Variable x:TypeArguments="x:String" Name="ContainingAggregate" />
                  <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                </DoWhile.Variables>
                <DoWhile.Condition>[LUNName &lt;&gt; ""]</DoWhile.Condition>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_11">
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_53">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_54">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read SVM Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_35" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[SVMName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_55">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,1).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[SVMName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read LUN Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_36" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_56">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,2).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read LUN Path" sap2010:WorkflowViewState.IdRef="ExcelReadCell_37" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNPath]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_57">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,3).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNPath]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read LUN Size" sap2010:WorkflowViewState.IdRef="ExcelReadCell_38" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNSize]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_58">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,4).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNSize]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next LUN Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_39" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                </Sequence>
              </DoWhile>
            </Sequence>
            <ui:CommentOut DisplayName="Comment Out" sap2010:WorkflowViewState.IdRef="CommentOut_6">
              <ui:CommentOut.Body>
                <Sequence DisplayName="Ignored Activities" sap2010:WorkflowViewState.IdRef="Sequence_28">
                  <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="ReleaseComObject" TargetType="sri:Marshal">
                    <InArgument x:TypeArguments="x:Object">[app]</InArgument>
                  </InvokeMethod>
                </Sequence>
              </ui:CommentOut.Body>
            </ui:CommentOut>
            <ui:CommentOut DisplayName="Comment Out" sap2010:WorkflowViewState.IdRef="CommentOut_7">
              <ui:CommentOut.Body>
                <Sequence DisplayName="Ignored Activities" sap2010:WorkflowViewState.IdRef="Sequence_29">
                  <InvokeMethod DisplayName="Invoke method" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="ReleaseComObject" TargetType="sri:Marshal">
                    <InArgument x:TypeArguments="x:Object">[app]</InArgument>
                  </InvokeMethod>
                </Sequence>
              </ui:CommentOut.Body>
            </ui:CommentOut>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <ui:ExcelApplicationScope Password="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="Excel Application Scope DRC" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" ReadOnly="True" Visible="False" WorkbookPath="[ReportFolder + &quot;DRC\DRC_022019165303.xls&quot;]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do Excel DRC" sap2010:WorkflowViewState.IdRef="Sequence_26">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="SheetName" />
              <Variable x:TypeArguments="x:Object" Name="missing" />
              <Variable x:TypeArguments="x:Int32" Default="15" Name="counter" />
            </Sequence.Variables>
            <Assign sap2010:WorkflowViewState.IdRef="Assign_59">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[SheetName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Hardware Overview</InArgument>
              </Assign.Value>
            </Assign>
            <While DisplayName="While Hardware Overview" sap2010:WorkflowViewState.IdRef="While_4">
              <While.Variables>
                <Variable x:TypeArguments="x:String" Name="Model" />
                <Variable x:TypeArguments="x:String" Name="HostName" />
                <Variable x:TypeArguments="x:String" Name="SerialNumber" />
                <Variable x:TypeArguments="x:String" Name="OSVersion" />
                <Variable x:TypeArguments="x:String" Name="TotalCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalUsableCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalUsedCapacity" />
                <Variable x:TypeArguments="x:String" Name="TotalAvailableCapacity" />
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
              </While.Variables>
              <While.Condition>[i &lt; 2]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_13">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_61">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_62">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString()]" DisplayName="Read Model" sap2010:WorkflowViewState.IdRef="ExcelReadCell_40" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[Model]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString()]" DisplayName="Read Hostname" sap2010:WorkflowViewState.IdRef="ExcelReadCell_41" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[HostName]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString()]" DisplayName="Read Serial Number" sap2010:WorkflowViewState.IdRef="ExcelReadCell_42" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[SerialNumber]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString()]" DisplayName="Read OS Version" sap2010:WorkflowViewState.IdRef="ExcelReadCell_43" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[OSVersion]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString()]" DisplayName="Read Total Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_44" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;I&quot; + counter.ToString()]" DisplayName="Read Total Usable Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_45" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalUsableCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;J&quot; + counter.ToString()]" DisplayName="Read Total Used Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_46" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalUsedCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <ui:ExcelReadCell Cell="[&quot;K&quot; + counter.ToString()]" DisplayName="Read Total Available Capacity" sap2010:WorkflowViewState.IdRef="ExcelReadCell_47" SheetName="[SheetName]">
                  <ui:ExcelReadCell.Result>
                    <OutArgument x:TypeArguments="x:String">[TotalAvailableCapacity]</OutArgument>
                  </ui:ExcelReadCell.Result>
                </ui:ExcelReadCell>
                <Assign DisplayName="Assign Model" sap2010:WorkflowViewState.IdRef="Assign_63">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,1).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Model]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign HostName" sap2010:WorkflowViewState.IdRef="Assign_64">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,2).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[HostName]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Serial Number" sap2010:WorkflowViewState.IdRef="Assign_65">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,3).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[SerialNumber]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign OSVersion" sap2010:WorkflowViewState.IdRef="Assign_66">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,4).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[OSVersion]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Capacity" sap2010:WorkflowViewState.IdRef="Assign_67">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,5).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Usable Capacity" sap2010:WorkflowViewState.IdRef="Assign_68">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,6).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalUsableCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Used Capacity" sap2010:WorkflowViewState.IdRef="Assign_69">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,7).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalUsedCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Total Available Capacity" sap2010:WorkflowViewState.IdRef="Assign_70">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(16).Cell(i+2,8).Range.Text]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[TotalAvailableCapacity]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </While>
            <Assign DisplayName="Assign Capacity Sheet" sap2010:WorkflowViewState.IdRef="Assign_71">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[SheetName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Capacity</InArgument>
              </Assign.Value>
            </Assign>
            <While DisplayName="While In Aggregate Info DRC" sap2010:WorkflowViewState.IdRef="While_5">
              <While.Variables>
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="15" Name="TableNumber" />
              </While.Variables>
              <While.Condition>[i&lt;2]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_15">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_72">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_73">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[TableNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[TableNumber+2]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelLookUpRange DisplayName="LookUp Range JKT-STOCL-0" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_7" Result="[StartRow]" SheetName="[SheetName]" Value="[&quot;JAH-STOCL-0&quot; + i.ToString]">
                  <ui:ExcelLookUpRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelLookUpRange.Range>
                </ui:ExcelLookUpRange>
                <ui:ExcelLookUpRange DisplayName="LookUp Range Aggregate Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_8" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Aggregate Info" />
                <Assign sap2010:WorkflowViewState.IdRef="Assign_74">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                  </Assign.Value>
                </Assign>
                <DoWhile DisplayName="Do While Capacity Aggregate Info" sap2010:WorkflowViewState.IdRef="DoWhile_5">
                  <DoWhile.Variables>
                    <Variable x:TypeArguments="x:String" Name="AggregateName" />
                    <Variable x:TypeArguments="x:String" Name="Allocated" />
                    <Variable x:TypeArguments="x:String" Name="Used" />
                    <Variable x:TypeArguments="x:String" Name="AvailTB" />
                    <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                    <Variable x:TypeArguments="x:String" Name="SnapReserve" />
                    <Variable x:TypeArguments="x:String" Name="AllInVolume" />
                    <Variable x:TypeArguments="x:String" Name="AggregateType" />
                    <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                  </DoWhile.Variables>
                  <DoWhile.Condition>[AggregateName &lt;&gt; ""]</DoWhile.Condition>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_14">
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_75">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_76">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read Aggr Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_48" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateName]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_77">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,1).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AggregateName]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Allocated" sap2010:WorkflowViewState.IdRef="ExcelReadCell_49" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[Allocated]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_78">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,2).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Allocated]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Used" sap2010:WorkflowViewState.IdRef="ExcelReadCell_50" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[Used]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_79">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,3).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Used]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read AvailTB" sap2010:WorkflowViewState.IdRef="ExcelReadCell_51" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AvailTB]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_80">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,4).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AvailTB]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;F&quot; + counter.ToString]" DisplayName="Read Avail Persen" sap2010:WorkflowViewState.IdRef="ExcelReadCell_52" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AvailPersen]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_81">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,5).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AvailPersen]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Snap Reserve" sap2010:WorkflowViewState.IdRef="ExcelReadCell_53" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[SnapReserve]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_82">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,6).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[SnapReserve]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read All In Volume" sap2010:WorkflowViewState.IdRef="ExcelReadCell_54" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AllInVolume]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_83">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,7).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AllInVolume]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;I&quot; + counter.ToString]" DisplayName="Read Aggregate Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_55" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_84">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,8).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AggregateType]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + (counter+1).ToString]" DisplayName="Read Next Aggr Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_56" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[AggregateName]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                  </Sequence>
                </DoWhile>
              </Sequence>
            </While>
            <While DisplayName="While In Capacity Disk Summary" sap2010:WorkflowViewState.IdRef="While_6">
              <While.Variables>
                <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="16" Name="TableNumber" />
              </While.Variables>
              <While.Condition>[i&lt;2]</While.Condition>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_18">
                <Assign sap2010:WorkflowViewState.IdRef="Assign_85">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_86">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[TableNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[TableNumber+2]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelLookUpRange DisplayName="LookUp Range JKT-STOCL-0" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_9" Result="[StartRow]" SheetName="[SheetName]" Value="[&quot;JAH-STOCL-0&quot; + i.ToString]">
                  <ui:ExcelLookUpRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelLookUpRange.Range>
                </ui:ExcelLookUpRange>
                <ui:ExcelLookUpRange DisplayName="LookUp Range Disk Summary" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_10" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Disk Summary" />
                <Assign sap2010:WorkflowViewState.IdRef="Assign_87">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                  </Assign.Value>
                </Assign>
                <DoWhile DisplayName="Do While Disk Summary" sap2010:WorkflowViewState.IdRef="DoWhile_6">
                  <DoWhile.Variables>
                    <Variable x:TypeArguments="x:String" Name="DiskModel" />
                    <Variable x:TypeArguments="x:String" Name="DiskType" />
                    <Variable x:TypeArguments="x:String" Name="DiskSize" />
                    <Variable x:TypeArguments="x:String" Name="OwnedDisk" />
                    <Variable x:TypeArguments="x:String" Name="DataDrives" />
                    <Variable x:TypeArguments="x:String" Name="ParityDrives" />
                    <Variable x:TypeArguments="x:String" Name="SpareDisks" />
                    <Variable x:TypeArguments="x:String" Name="ADPDisks" />
                    <Variable x:TypeArguments="x:Int32" Default="0" Name="j" />
                  </DoWhile.Variables>
                  <DoWhile.Condition>[DiskType &lt;&gt; ""]</DoWhile.Condition>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_17">
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_88">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_89">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read Disk Model" sap2010:WorkflowViewState.IdRef="ExcelReadCell_57" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskModel]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_90">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,1).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskModel]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Disk Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_58" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_91">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,2).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskType]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Disk Size" sap2010:WorkflowViewState.IdRef="ExcelReadCell_59" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskSize]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_92">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,3).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DiskSize]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read OwnedDisk" sap2010:WorkflowViewState.IdRef="ExcelReadCell_60" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[OwnedDisk]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_93">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,4).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[OwnedDisk]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;F&quot; + counter.ToString]" DisplayName="Read Data Drives" sap2010:WorkflowViewState.IdRef="ExcelReadCell_61" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DataDrives]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_94">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,5).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[DataDrives]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Parity Drives" sap2010:WorkflowViewState.IdRef="ExcelReadCell_62" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[ParityDrives]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_95">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,6).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[ParityDrives]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read Spare Disks" sap2010:WorkflowViewState.IdRef="ExcelReadCell_63" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[SpareDisks]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                    <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_96">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+2,7).Range.Text]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[SpareDisks]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next Disk Type" sap2010:WorkflowViewState.IdRef="ExcelReadCell_64" SheetName="[SheetName]">
                      <ui:ExcelReadCell.Result>
                        <OutArgument x:TypeArguments="x:String">[DiskType]</OutArgument>
                      </ui:ExcelReadCell.Result>
                    </ui:ExcelReadCell>
                  </Sequence>
                </DoWhile>
              </Sequence>
            </While>
            <Sequence DisplayName="Sequence Volume Info" sap2010:WorkflowViewState.IdRef="Sequence_21">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="21" Name="TableNumber" />
              </Sequence.Variables>
              <ui:ExcelLookUpRange DisplayName="LookUp Range Volume Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_11" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="Volume Info" />
              <Assign sap2010:WorkflowViewState.IdRef="Assign_97">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                </Assign.Value>
              </Assign>
              <DoWhile DisplayName="Do While Volume Info" sap2010:WorkflowViewState.IdRef="DoWhile_7">
                <DoWhile.Variables>
                  <Variable x:TypeArguments="x:String" Name="SVMName" />
                  <Variable x:TypeArguments="x:String" Name="VolumeName" />
                  <Variable x:TypeArguments="x:String" Name="Allocated" />
                  <Variable x:TypeArguments="x:String" Name="UsedData" />
                  <Variable x:TypeArguments="x:String" Name="Avail" />
                  <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                  <Variable x:TypeArguments="x:String" Name="ContainingAggregate" />
                  <Variable x:TypeArguments="x:Int32" Default="1" Name="j" />
                  <Variable x:TypeArguments="x:String" Name="Snapshot" />
                </DoWhile.Variables>
                <DoWhile.Condition>[VolumeName &lt;&gt; ""]</DoWhile.Condition>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_20">
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_98">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_99">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read SVM Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_65" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[SVMName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_100">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,1).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[SVMName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read Volume Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_66" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[VolumeName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_101">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,2).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[VolumeName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read Allocated" sap2010:WorkflowViewState.IdRef="ExcelReadCell_67" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[Allocated]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_102">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,3).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Allocated]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read Used Data" sap2010:WorkflowViewState.IdRef="ExcelReadCell_68" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[UsedData]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_103">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,4).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[UsedData]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;F&quot; + counter.ToString]" DisplayName="Read Snapshot" sap2010:WorkflowViewState.IdRef="ExcelReadCell_78" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[Snapshot]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_114">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,5).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Snapshot]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;G&quot; + counter.ToString]" DisplayName="Read Avail" sap2010:WorkflowViewState.IdRef="ExcelReadCell_69" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[Avail]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_104">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,6).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Avail]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;H&quot; + counter.ToString]" DisplayName="Read Avail Persen" sap2010:WorkflowViewState.IdRef="ExcelReadCell_70" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[AvailPersen]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_105">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,7).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[AvailPersen]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;L&quot; + counter.ToString]" DisplayName="Read Cont Aggregate" sap2010:WorkflowViewState.IdRef="ExcelReadCell_71" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[ContainingAggregate]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_106">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,8).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[ContainingAggregate]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next Volume Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_72" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[VolumeName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                </Sequence>
              </DoWhile>
            </Sequence>
            <Sequence DisplayName="Sequence Lun Info" sap2010:WorkflowViewState.IdRef="Sequence_24">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="StartRow" />
                <Variable x:TypeArguments="x:String" Name="StartTableRow" />
                <Variable x:TypeArguments="x:Int32" Default="22" Name="TableNumber" />
              </Sequence.Variables>
              <ui:ExcelLookUpRange DisplayName="LookUp Range Lun Info" sap2010:WorkflowViewState.IdRef="ExcelLookUpRange_12" Range="[StartRow]" Result="[StartTableRow]" SheetName="[SheetName]" Value="LUN Info" />
              <Assign sap2010:WorkflowViewState.IdRef="Assign_107">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[Counter]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[Convert.ToInt32(System.Text.RegularExpressions.Regex.Replace(StartTableRow,"\D","")) +1]</InArgument>
                </Assign.Value>
              </Assign>
              <DoWhile DisplayName="Do While Lun Info" sap2010:WorkflowViewState.IdRef="DoWhile_8">
                <DoWhile.Variables>
                  <Variable x:TypeArguments="x:String" Name="SVMName" />
                  <Variable x:TypeArguments="x:String" Name="LUNName" />
                  <Variable x:TypeArguments="x:String" Name="LUNPath" />
                  <Variable x:TypeArguments="x:String" Name="LUNSize" />
                  <Variable x:TypeArguments="x:String" Name="Avail" />
                  <Variable x:TypeArguments="x:String" Name="AvailPersen" />
                  <Variable x:TypeArguments="x:String" Name="ContainingAggregate" />
                  <Variable x:TypeArguments="x:Int32" Default="1" Name="j" />
                </DoWhile.Variables>
                <DoWhile.Condition>[LUNName &lt;&gt; ""]</DoWhile.Condition>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_23">
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_108">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_109">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[counter+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;B&quot; + counter.ToString]" DisplayName="Read SVM Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_73" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[SVMName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_110">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,1).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[SVMName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + counter.ToString]" DisplayName="Read LUN Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_74" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_111">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,2).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNName]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;D&quot; + counter.ToString]" DisplayName="Read LUN Path" sap2010:WorkflowViewState.IdRef="ExcelReadCell_75" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNPath]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_112">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,3).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNPath]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;E&quot; + counter.ToString]" DisplayName="Read LUN Size" sap2010:WorkflowViewState.IdRef="ExcelReadCell_76" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNSize]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                  <Assign DisplayName="Assign To Word" sap2010:WorkflowViewState.IdRef="Assign_113">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[wordDoc.Tables(TableNumber).Cell(j+1,4).Range.Text]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[LUNSize]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ExcelReadCell Cell="[&quot;C&quot; + (counter+1).ToString]" DisplayName="Read Next LUN Name" sap2010:WorkflowViewState.IdRef="ExcelReadCell_77" SheetName="[SheetName]">
                    <ui:ExcelReadCell.Result>
                      <OutArgument x:TypeArguments="x:String">[LUNName]</OutArgument>
                    </ui:ExcelReadCell.Result>
                  </ui:ExcelReadCell>
                </Sequence>
              </DoWhile>
            </Sequence>
            <InvokeMethod DisplayName="Invoke Method" sap2010:WorkflowViewState.IdRef="InvokeMethod_6" MethodName="Save">
              <InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="moiw:DocumentClass">[Ctype(wordDoc,Microsoft.Office.Interop.Word.DocumentClass)]</InArgument>
              </InvokeMethod.TargetObject>
            </InvokeMethod>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <sads:DebugSymbol.Symbol></sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="CopyFile_1" sap:VirtualizedContainerService.HintSize="548.8,22.4" />
      <sap2010:ViewStateData Id="WordReplacePicture_1" sap:VirtualizedContainerService.HintSize="314.4,88" />
      <sap2010:ViewStateData Id="WordReplacePicture_2" sap:VirtualizedContainerService.HintSize="314.4,88" />
      <sap2010:ViewStateData Id="WordReplacePicture_3" sap:VirtualizedContainerService.HintSize="314.4,88" />
      <sap2010:ViewStateData Id="WordReplacePicture_4" sap:VirtualizedContainerService.HintSize="314.4,88" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="200,52.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WordApplicationScope_1" sap:VirtualizedContainerService.HintSize="548.8,52.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_115" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="Assign_116" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="Assign_117" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="Assign_118" sap:VirtualizedContainerService.HintSize="548.8,60" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_1" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_2" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_3" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_4" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_5" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_7" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_8" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_9" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="336.8,1884.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_18" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_19" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_1" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_2" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="Assign_17" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_29" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_20" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_10" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_21" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_11" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_22" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_12" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_23" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_13" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_24" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_14" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_25" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_15" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_26" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_16" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_27" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_17" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_28" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_18" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="336.8,1984.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_1" sap:VirtualizedContainerService.HintSize="464,2147.2" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="486.4,2828">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_2" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="Assign_30" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_31" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_3" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_4" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="Assign_32" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_33" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_34" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_19" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_35" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_20" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_36" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_21" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_37" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_22" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_38" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_23" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_39" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_24" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_40" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_25" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_41" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_26" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="336.8,1784.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_2" sap:VirtualizedContainerService.HintSize="464,1947.2" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="486.4,2628">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_3" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_5" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="Assign_42" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_43" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_44" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_27" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_45" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_28" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_46" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_29" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_47" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_30" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_48" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_31" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_49" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_32" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_50" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_33" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_51" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_34" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="336.8,1784.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_3" sap:VirtualizedContainerService.HintSize="464,1947.2" />
      <sap2010:ViewStateData Id="Sequence_10" sap:VirtualizedContainerService.HintSize="243.2,52.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelLookUpRange_6" sap:VirtualizedContainerService.HintSize="464,88" />
      <sap2010:ViewStateData Id="Assign_52" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_53" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_54" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_35" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_55" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_36" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_56" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_37" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_57" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_38" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_58" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_39" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="336.8,1184.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_4" sap:VirtualizedContainerService.HintSize="464,1347.2" />
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="243.2,52.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeMethod_2" sap:VirtualizedContainerService.HintSize="217.6,134.4" />
      <sap2010:ViewStateData Id="Sequence_28" sap:VirtualizedContainerService.HintSize="240,259.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CommentOut_6" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="InvokeMethod_3" sap:VirtualizedContainerService.HintSize="217.6,134.4" />
      <sap2010:ViewStateData Id="Sequence_29" sap:VirtualizedContainerService.HintSize="240,259.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CommentOut_7" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="265.6,934.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelApplicationScope_1" sap:VirtualizedContainerService.HintSize="548.8,1084">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_59" sap:VirtualizedContainerService.HintSize="512,60" />
      <sap2010:ViewStateData Id="Assign_61" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_62" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_40" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_41" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_42" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_43" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_44" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_45" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_46" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="ExcelReadCell_47" sap:VirtualizedContainerService.HintSize="243.2,52.8" />
      <sap2010:ViewStateData Id="Assign_63" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_64" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_65" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_66" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_67" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_68" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_69" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Assign_70" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="265.6,1827.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_4" sap:VirtualizedContainerService.HintSize="512,1986.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_71" sap:VirtualizedContainerService.HintSize="512,60" />
      <sap2010:ViewStateData Id="Assign_72" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_73" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_7" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelLookUpRange_8" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_74" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_75" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_76" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_48" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_77" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_49" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_78" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_50" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_79" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_51" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_80" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_52" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_81" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_53" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_82" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_54" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_83" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_55" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_84" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_56" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_14" sap:VirtualizedContainerService.HintSize="336.8,1941.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_5" sap:VirtualizedContainerService.HintSize="464,2104">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="486.4,2784.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_5" sap:VirtualizedContainerService.HintSize="512,2944">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_85" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_86" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="ExcelLookUpRange_9" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelLookUpRange_10" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_87" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_88" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_89" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_57" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_90" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_58" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_91" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_59" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_92" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_60" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_93" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_61" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_94" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_62" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_95" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_63" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_96" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_64" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Sequence_17" sap:VirtualizedContainerService.HintSize="336.8,1734.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_6" sap:VirtualizedContainerService.HintSize="464,1896.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_18" sap:VirtualizedContainerService.HintSize="486.4,2577.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_6" sap:VirtualizedContainerService.HintSize="512,2736.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelLookUpRange_11" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_97" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_98" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_99" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_65" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_100" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_66" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_101" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_67" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_102" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_68" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_103" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_78" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_114" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_69" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_104" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_70" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_105" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_71" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_106" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_72" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_20" sap:VirtualizedContainerService.HintSize="336.8,1948.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_7" sap:VirtualizedContainerService.HintSize="464,2111.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_21" sap:VirtualizedContainerService.HintSize="512,2464">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelLookUpRange_12" sap:VirtualizedContainerService.HintSize="464,88">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_107" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_108" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="Assign_109" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_73" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_110" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_74" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_111" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_75" sap:VirtualizedContainerService.HintSize="314.4,52.8" />
      <sap2010:ViewStateData Id="Assign_112" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_76" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_113" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelReadCell_77" sap:VirtualizedContainerService.HintSize="314.4,60">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_23" sap:VirtualizedContainerService.HintSize="336.8,1163.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_8" sap:VirtualizedContainerService.HintSize="464,1325.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_24" sap:VirtualizedContainerService.HintSize="512,1678.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeMethod_6" sap:VirtualizedContainerService.HintSize="512,134.4" />
      <sap2010:ViewStateData Id="Sequence_26" sap:VirtualizedContainerService.HintSize="534.4,12468.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelApplicationScope_2" sap:VirtualizedContainerService.HintSize="548.8,12618.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="571.2,14622.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GenerateReport_1" sap:VirtualizedContainerService.HintSize="611.2,14702.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>